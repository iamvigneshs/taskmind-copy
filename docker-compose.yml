# Copyright (c) 2025 Acarin Inc. All rights reserved.
# Proprietary and confidential.
# Docker Compose for MissionMind TasksMind Microservices

version: '3.8'

services:
  # Database services - each microservice gets its own database
  postgres-tasks:
    image: postgres:15
    environment:
      POSTGRES_DB: tasksmind_tasks
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpass123
    volumes:
      - postgres_tasks_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d tasksmind_tasks"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-assignments:
    image: postgres:15
    environment:
      POSTGRES_DB: tasksmind_assignments
      POSTGRES_USER: assignuser
      POSTGRES_PASSWORD: assignpass123
    volumes:
      - postgres_assignments_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assignuser -d tasksmind_assignments"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-comments:
    image: postgres:15
    environment:
      POSTGRES_DB: tasksmind_comments
      POSTGRES_USER: commentuser
      POSTGRES_PASSWORD: commentpass123
    volumes:
      - postgres_comments_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commentuser -d tasksmind_comments"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  task-service:
    build:
      context: ./services/task-service
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://taskuser:taskpass123@postgres-tasks:5432/tasksmind_tasks
      SERVICE_PORT: 8001
    ports:
      - "8001:8001"
    depends_on:
      postgres-tasks:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  assignment-service:
    build:
      context: ./services/assignment-service
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://assignuser:assignpass123@postgres-assignments:5432/tasksmind_assignments
      SERVICE_PORT: 8004
      TASK_SERVICE_URL: http://task-service:8001
      USER_SERVICE_URL: http://user-service:8002
    ports:
      - "8004:8004"
    depends_on:
      postgres-assignments:
        condition: service_healthy
      task-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  comment-service:
    build:
      context: ./services/comment-service
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://commentuser:commentpass123@postgres-comments:5432/tasksmind_comments
      SERVICE_PORT: 8005
    ports:
      - "8005:8005"
    depends_on:
      postgres-comments:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    environment:
      GATEWAY_PORT: 8000
      TASK_SERVICE_URL: http://task-service:8001
      ASSIGNMENT_SERVICE_URL: http://assignment-service:8004
      COMMENT_SERVICE_URL: http://comment-service:8005
    ports:
      - "8000:8000"
    depends_on:
      task-service:
        condition: service_healthy
      assignment-service:
        condition: service_healthy
      comment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  # Load balancer/reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-enabled
    depends_on:
      - api-gateway
    restart: unless-stopped

volumes:
  postgres_tasks_data:
  postgres_assignments_data:
  postgres_comments_data:
  grafana_data:

networks:
  default:
    driver: bridge